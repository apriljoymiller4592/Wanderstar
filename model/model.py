# -*- coding: utf-8 -*-
"""MagicWand_Mine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UKhvxVcBAg_MNlcynshthIoNkWJ2qqWy
"""

from google.colab import drive

drive.mount('\content\drive')

import tensorflow as tf

!pip install --upgrade tensorflow

print(tf.__version__)

import pandas as pd
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam


df = pd.read_csv('contentdrive/MyDrive/colab/data/data.csv')

train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)
train_df, val_df = train_test_split(train_df, test_size=0.25, random_state=42)  # 0.25 x 0.8 = 0.2

# Preprocessing
def preprocess_dataframe(df, directory):
    datagen = ImageDataGenerator(rescale=1./255)  # Normalize images
    generator = datagen.flow_from_dataframe(
        dataframe=df,
        directory=directory,
        x_col='path',
        y_col='label',
        target_size=(64, 64),  # Resize images to 64x64
        color_mode='grayscale',
        class_mode='categorical',
        batch_size=32,
        shuffle=True
    )
    return generator

train_generator = preprocess_dataframe(train_df, 'contentdrive/MyDrive/colab/')
val_generator = preprocess_dataframe(val_df, 'contentdrive/MyDrive/colab/')
test_generator = preprocess_dataframe(test_df, 'contentdrive/MyDrive/colab/')

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')  
])

model.compile(optimizer=Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])


history = model.fit(train_generator, epochs=10, validation_data=val_generator)

test_loss, test_acc = model.evaluate(test_generator)
print(f"Test accuracy: {test_acc}, Test loss: {test_loss}")

model.save('model.h5')